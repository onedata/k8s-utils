server:
  ## go-carbon Pod annotations:
  ##
  # annotations:
  #   iam.amazonaws.com/role: go-carbon

  ## go-carbon Docker image
  ##
  image: "onedata/docker-go-graphite:go-carbon-20171212_200402"

  nodeSelector:
    onedata.org/service.logs: ""

# kubectl taint nodes k8s-2-otc-onedata-0002 onedata/service.logs:NoSchedule
  tolerations:
    - key: onedata.org/service.logs
      effect: "PreferNoSchedule"

  ## go-carbon container name
  ##
  name: go-carbon

  ## Global imagePullPolicy
  ## Default: 'Always' if image tag is 'latest', else 'IfNotPresent'
  ## Ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  # imagePullPolicy:

  # Persist data to a persitent volume
  persistentVolume:
    ## If true, go-carbon will create a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: false

    ## go-carbon data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## go-carbon data Persistent Volume annotations
    ##
    annotations: {}

    ## go-carbon data Persistent Volume existing claim name
    ## Requires server.persistentVolume.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim: ""

    ## go-carbon data Persistent Volume size
    ## Default: 1Gi
    ##
    size: 1Gi

    ## go-carbon data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

    ## Subdirectory of data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ""

  ## go-carbon resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    requests:
      cpu: 100m
      memory: 100Mi

  service:
    annotations: {}
    type: ClusterIP

  serviceExternal:
    annotations: {}
    type: NodePort
    httpPort: 80
    nodePort: 30300

## go-carbon config file ConfigMap entry
##
serverConfigFile:
  go-carbon.ini: |
    ; instance_name = ${HOSTNAME}
    [paths]
    data = /var/lib/go-carbon/data
    logs = /var/log/go-carbon
    plugins = /var/lib/go-carbon/plugins

    [server]
    ;protocol = http
    ;http_addr =
    ;http_port = 3000
    ;domain = localhost
    ;enforce_domain = false
    ;root_url = %(protocol)s://%(domain)s:%(http_port)s/
    ;router_logging = false
    ;static_root_path = public
    ;enable_gzip = false
    ;cert_file =
    ;cert_key =

    [database]
    ;type = sqlite3
    ;host = 127.0.0.1:3306
    ;name = go-carbon
    ;user = root
    ;password =
    ;ssl_mode = disable
    ;path = go-carbon.db

    [session]
    ;provider = file
    ;provider_config = sessions
    ;cookie_name = go-carbon_sess
    ;cookie_secure = false
    ;session_life_time = 86400

    [analytics]
    ;reporting_enabled = true
    check_for_updates = true
    ;google_analytics_ua_id =

    [security]
    ;admin_user = admin
    ;admin_password = admin
    ;secret_key = SW2YcwTIb9zpOOhoPsMm
    ;login_remember_days = 7
    ;cookie_username = go-carbon_user
    ;cookie_remember_name = go-carbon_remember
    ;disable_gravatar = false
    ;data_source_proxy_whitelist =

    [snapshots]
    ;external_enabled = true
    ;external_snapshot_url = https://snapshots-origin.raintank.io
    ;external_snapshot_name = Publish to snapshot.raintank.io

    [users]
    ;allow_sign_up = true
    ;allow_org_create = true
    ;auto_assign_org = true
    ;auto_assign_org_role = Viewer
    ;login_hint = email or username
    ;default_theme = dark

    [auth.anonymous]
    ;enabled = false
    ;org_name = Main Org.
    ;org_role = Viewer

    [auth.github]
    ;enabled = false
    ;allow_sign_up = false
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    ;auth_url = https://github.com/login/oauth/authorize
    ;token_url = https://github.com/login/oauth/access_token
    ;api_url = https://api.github.com/user
    ;team_ids =
    ;allowed_organizations =

    [auth.google]
    ;enabled = false
    ;allow_sign_up = false
    ;client_id = some_client_id
    ;client_secret = some_client_secret
    ;scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
    ;auth_url = https://accounts.google.com/o/oauth2/auth
    ;token_url = https://accounts.google.com/o/oauth2/token
    ;api_url = https://www.googleapis.com/oauth2/v1/userinfo
    ;allowed_domains =

    [auth.proxy]
    ;enabled = false
    ;header_name = X-WEBAUTH-USER
    ;header_property = username
    ;auto_sign_up = true

    [auth.basic]
    ;enabled = true

    [auth.ldap]
    ;enabled = false
    ;config_file = /etc/go-carbon/ldap.toml

    [smtp]
    ;enabled = false
    ;host = localhost:25
    ;user =
    ;password =
    ;cert_file =
    ;key_file =
    ;skip_verify = false
    ;from_address = admin@go-carbon.localhost

    [emails]
    ;welcome_email_on_sign_up = false

    [log]
    mode = console
    level = info

    [log.console]
    ;level =
    ;format = console

    [event_publisher]
    ;enabled = false
    ;rabbitmq_url = amqp://localhost/
    ;exchange = go-carbon_events

    [dashboards.json]
    enabled = true
    path = /var/lib/go-carbon/dashboards

    [metrics]
    ;enabled           = true
    ;interval_seconds  = 10

    ; [metrics.graphite]
    ; address = localhost:2003
    ; prefix = prod.go-carbon.%(instance_name)s.

    [go-carbon_net]
    url = https://go-carbon.net